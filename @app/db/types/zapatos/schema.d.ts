/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v4.0.3), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 102 }

  /* === schema: app_public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace organization_invitations {
    export type Table = 'organization_invitations';
    export interface Selectable {
      /**
      * **organization_invitations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **organization_invitations.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id: string;
      /**
      * **organization_invitations.code**
      * - `text` in database
      * - Nullable, no default
      */
      code: string | null;
      /**
      * **organization_invitations.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id: string | null;
      /**
      * **organization_invitations.email**
      * - `citext` in database
      * - Nullable, no default
      */
      email: string | null;
    }
    export interface JSONSelectable {
      /**
      * **organization_invitations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **organization_invitations.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id: string;
      /**
      * **organization_invitations.code**
      * - `text` in database
      * - Nullable, no default
      */
      code: string | null;
      /**
      * **organization_invitations.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id: string | null;
      /**
      * **organization_invitations.email**
      * - `citext` in database
      * - Nullable, no default
      */
      email: string | null;
    }
    export interface Whereable {
      /**
      * **organization_invitations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_invitations.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_invitations.code**
      * - `text` in database
      * - Nullable, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_invitations.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_invitations.email**
      * - `citext` in database
      * - Nullable, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **organization_invitations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **organization_invitations.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **organization_invitations.code**
      * - `text` in database
      * - Nullable, no default
      */
      code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **organization_invitations.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **organization_invitations.email**
      * - `citext` in database
      * - Nullable, no default
      */
      email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **organization_invitations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **organization_invitations.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **organization_invitations.code**
      * - `text` in database
      * - Nullable, no default
      */
      code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **organization_invitations.user_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **organization_invitations.email**
      * - `citext` in database
      * - Nullable, no default
      */
      email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'organization_invitations_organization_id_email_key' | 'organization_invitations_organization_id_user_id_key' | 'organization_invitations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace organization_memberships {
    export type Table = 'organization_memberships';
    export interface Selectable {
      /**
      * **organization_memberships.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **organization_memberships.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id: string;
      /**
      * **organization_memberships.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **organization_memberships.is_owner**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_owner: boolean;
      /**
      * **organization_memberships.is_billing_contact**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_billing_contact: boolean;
      /**
      * **organization_memberships.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **organization_memberships.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **organization_memberships.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id: string;
      /**
      * **organization_memberships.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **organization_memberships.is_owner**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_owner: boolean;
      /**
      * **organization_memberships.is_billing_contact**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_billing_contact: boolean;
      /**
      * **organization_memberships.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **organization_memberships.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_memberships.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_memberships.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_memberships.is_owner**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_owner?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_memberships.is_billing_contact**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_billing_contact?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organization_memberships.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **organization_memberships.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **organization_memberships.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **organization_memberships.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **organization_memberships.is_owner**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_owner?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **organization_memberships.is_billing_contact**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_billing_contact?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **organization_memberships.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **organization_memberships.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **organization_memberships.organization_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      organization_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **organization_memberships.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **organization_memberships.is_owner**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_owner?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **organization_memberships.is_billing_contact**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_billing_contact?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **organization_memberships.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'organization_memberships_organization_id_user_id_key' | 'organization_memberships_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace organizations {
    export type Table = 'organizations';
    export interface Selectable {
      /**
      * **organizations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **organizations.slug**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      slug: string;
      /**
      * **organizations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **organizations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **organizations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **organizations.slug**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      slug: string;
      /**
      * **organizations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **organizations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **organizations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organizations.slug**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organizations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **organizations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **organizations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **organizations.slug**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      slug: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **organizations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **organizations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **organizations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **organizations.slug**
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **organizations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **organizations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'organizations_pkey' | 'organizations_slug_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace user_authentications {
    export type Table = 'user_authentications';
    export interface Selectable {
      /**
      * **user_authentications.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **user_authentications.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **user_authentications.service**
      *
      * The login service used, e.g. `twitter` or `github`.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      service: string;
      /**
      * **user_authentications.identifier**
      *
      * A unique identifier for the user within the login service.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **user_authentications.details**
      *
      * Additional profile details extracted from this login method
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      details: db.JSONValue;
      /**
      * **user_authentications.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **user_authentications.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **user_authentications.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **user_authentications.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **user_authentications.service**
      *
      * The login service used, e.g. `twitter` or `github`.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      service: string;
      /**
      * **user_authentications.identifier**
      *
      * A unique identifier for the user within the login service.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string;
      /**
      * **user_authentications.details**
      *
      * Additional profile details extracted from this login method
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      details: db.JSONValue;
      /**
      * **user_authentications.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **user_authentications.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **user_authentications.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_authentications.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_authentications.service**
      *
      * The login service used, e.g. `twitter` or `github`.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      service?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_authentications.identifier**
      *
      * A unique identifier for the user within the login service.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_authentications.details**
      *
      * Additional profile details extracted from this login method
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      details?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_authentications.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_authentications.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_authentications.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **user_authentications.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_authentications.service**
      *
      * The login service used, e.g. `twitter` or `github`.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      service: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_authentications.identifier**
      *
      * A unique identifier for the user within the login service.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_authentications.details**
      *
      * Additional profile details extracted from this login method
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      details?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
      /**
      * **user_authentications.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_authentications.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_authentications.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_authentications.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_authentications.service**
      *
      * The login service used, e.g. `twitter` or `github`.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      service?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_authentications.identifier**
      *
      * A unique identifier for the user within the login service.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_authentications.details**
      *
      * Additional profile details extracted from this login method
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      details?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_authentications.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_authentications.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'uniq_user_authentications' | 'user_authentications_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace user_emails {
    export type Table = 'user_emails';
    export interface Selectable {
      /**
      * **user_emails.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **user_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `app_public.current_user_id()`
      */
      user_id: string;
      /**
      * **user_emails.email**
      *
      * The users email address, in `a@b.c` format.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_emails.is_verified**
      *
      * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified: boolean;
      /**
      * **user_emails.is_primary**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_primary: boolean;
      /**
      * **user_emails.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **user_emails.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **user_emails.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **user_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `app_public.current_user_id()`
      */
      user_id: string;
      /**
      * **user_emails.email**
      *
      * The users email address, in `a@b.c` format.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_emails.is_verified**
      *
      * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified: boolean;
      /**
      * **user_emails.is_primary**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_primary: boolean;
      /**
      * **user_emails.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **user_emails.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **user_emails.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `app_public.current_user_id()`
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_emails.email**
      *
      * The users email address, in `a@b.c` format.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_emails.is_verified**
      *
      * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_emails.is_primary**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_primary?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_emails.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_emails.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_emails.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **user_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `app_public.current_user_id()`
      */
      user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **user_emails.email**
      *
      * The users email address, in `a@b.c` format.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_emails.is_verified**
      *
      * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **user_emails.is_primary**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_primary?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **user_emails.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_emails.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_emails.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `app_public.current_user_id()`
      */
      user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_emails.email**
      *
      * The users email address, in `a@b.c` format.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_emails.is_verified**
      *
      * True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_emails.is_primary**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_primary?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_emails.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_emails.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'uniq_user_emails_primary_email' | 'uniq_user_emails_verified_email' | 'user_emails_pkey' | 'user_emails_user_id_email_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace user_roles {
    export type Table = 'user_roles';
    export interface Selectable {
      /**
      * **user_roles.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **user_roles.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **user_roles.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **user_roles.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **user_roles.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_roles.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_roles.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_roles.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_roles.type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_roles.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_roles_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      *
      * Unique identifier for the user.
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users.username**
      *
      * Public-facing username (or 'handle') of the user.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **users.name**
      *
      * Public-facing first name (or pseudonym) of the user.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.surname**
      *
      * Public-facing last name of the user.
      * - `text` in database
      * - Nullable, no default
      */
      surname: string | null;
      /**
      * **users.thumbnail**
      * - `text` in database
      * - Nullable, no default
      */
      thumbnail: string | null;
      /**
      * **users.avatar_url**
      *
      * Optional avatar URL.
      * - `text` in database
      * - Nullable, no default
      */
      avatar_url: string | null;
      /**
      * **users.is_admin**
      *
      * If true, the user has elevated privileges.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_admin: boolean;
      /**
      * **users.is_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified: boolean;
      /**
      * **users.send_notifications**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      send_notifications: boolean | null;
      /**
      * **users.is_active**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      is_active: boolean | null;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      *
      * Unique identifier for the user.
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users.username**
      *
      * Public-facing username (or 'handle') of the user.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **users.name**
      *
      * Public-facing first name (or pseudonym) of the user.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.surname**
      *
      * Public-facing last name of the user.
      * - `text` in database
      * - Nullable, no default
      */
      surname: string | null;
      /**
      * **users.thumbnail**
      * - `text` in database
      * - Nullable, no default
      */
      thumbnail: string | null;
      /**
      * **users.avatar_url**
      *
      * Optional avatar URL.
      * - `text` in database
      * - Nullable, no default
      */
      avatar_url: string | null;
      /**
      * **users.is_admin**
      *
      * If true, the user has elevated privileges.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_admin: boolean;
      /**
      * **users.is_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified: boolean;
      /**
      * **users.send_notifications**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      send_notifications: boolean | null;
      /**
      * **users.is_active**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      is_active: boolean | null;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **users.id**
      *
      * Unique identifier for the user.
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.username**
      *
      * Public-facing username (or 'handle') of the user.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.name**
      *
      * Public-facing first name (or pseudonym) of the user.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.surname**
      *
      * Public-facing last name of the user.
      * - `text` in database
      * - Nullable, no default
      */
      surname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.thumbnail**
      * - `text` in database
      * - Nullable, no default
      */
      thumbnail?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.avatar_url**
      *
      * Optional avatar URL.
      * - `text` in database
      * - Nullable, no default
      */
      avatar_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.is_admin**
      *
      * If true, the user has elevated privileges.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_admin?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.is_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.send_notifications**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      send_notifications?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.is_active**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      is_active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      *
      * Unique identifier for the user.
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.username**
      *
      * Public-facing username (or 'handle') of the user.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      username: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.name**
      *
      * Public-facing first name (or pseudonym) of the user.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.surname**
      *
      * Public-facing last name of the user.
      * - `text` in database
      * - Nullable, no default
      */
      surname?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.thumbnail**
      * - `text` in database
      * - Nullable, no default
      */
      thumbnail?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.avatar_url**
      *
      * Optional avatar URL.
      * - `text` in database
      * - Nullable, no default
      */
      avatar_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.is_admin**
      *
      * If true, the user has elevated privileges.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_admin?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **users.is_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **users.send_notifications**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      send_notifications?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.is_active**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      is_active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      *
      * Unique identifier for the user.
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.username**
      *
      * Public-facing username (or 'handle') of the user.
      * - `citext` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.name**
      *
      * Public-facing first name (or pseudonym) of the user.
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.surname**
      *
      * Public-facing last name of the user.
      * - `text` in database
      * - Nullable, no default
      */
      surname?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.thumbnail**
      * - `text` in database
      * - Nullable, no default
      */
      thumbnail?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.avatar_url**
      *
      * Optional avatar URL.
      * - `text` in database
      * - Nullable, no default
      */
      avatar_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.is_admin**
      *
      * If true, the user has elevated privileges.
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_admin?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.is_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.send_notifications**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      send_notifications?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.is_active**
      * - `bool` in database
      * - Nullable, default: `true`
      */
      is_active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pkey' | 'users_username_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users_roles {
    export type Table = 'users_roles';
    export interface Selectable {
      /**
      * **users_roles.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users_roles.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **users_roles.role**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **users_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **users_roles.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users_roles.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **users_roles.role**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **users_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **users_roles.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users_roles.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users_roles.role**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users_roles.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users_roles.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users_roles.role**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users_roles.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users_roles.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users_roles.role**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users_roles.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_roles_pkey' | 'users_roles_user_id_role_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = organization_invitations.Table | organization_memberships.Table | organizations.Table | user_authentications.Table | user_emails.Table | user_roles.Table | users.Table | users_roles.Table;
  export type Selectable = organization_invitations.Selectable | organization_memberships.Selectable | organizations.Selectable | user_authentications.Selectable | user_emails.Selectable | user_roles.Selectable | users.Selectable | users_roles.Selectable;
  export type JSONSelectable = organization_invitations.JSONSelectable | organization_memberships.JSONSelectable | organizations.JSONSelectable | user_authentications.JSONSelectable | user_emails.JSONSelectable | user_roles.JSONSelectable | users.JSONSelectable | users_roles.JSONSelectable;
  export type Whereable = organization_invitations.Whereable | organization_memberships.Whereable | organizations.Whereable | user_authentications.Whereable | user_emails.Whereable | user_roles.Whereable | users.Whereable | users_roles.Whereable;
  export type Insertable = organization_invitations.Insertable | organization_memberships.Insertable | organizations.Insertable | user_authentications.Insertable | user_emails.Insertable | user_roles.Insertable | users.Insertable | users_roles.Insertable;
  export type Updatable = organization_invitations.Updatable | organization_memberships.Updatable | organizations.Updatable | user_authentications.Updatable | user_emails.Updatable | user_roles.Updatable | users.Updatable | users_roles.Updatable;
  export type UniqueIndex = organization_invitations.UniqueIndex | organization_memberships.UniqueIndex | organizations.UniqueIndex | user_authentications.UniqueIndex | user_emails.UniqueIndex | user_roles.UniqueIndex | users.UniqueIndex | users_roles.UniqueIndex;
  export type Column = organization_invitations.Column | organization_memberships.Column | organizations.Column | user_authentications.Column | user_emails.Column | user_roles.Column | users.Column | users_roles.Column;
  export type AllTables = [organization_invitations.Table, organization_memberships.Table, organizations.Table, user_authentications.Table, user_emails.Table, user_roles.Table, users.Table, users_roles.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    organization_invitations: organization_invitations.Selectable;
    organization_memberships: organization_memberships.Selectable;
    organizations: organizations.Selectable;
    user_authentications: user_authentications.Selectable;
    user_emails: user_emails.Selectable;
    user_roles: user_roles.Selectable;
    users: users.Selectable;
    users_roles: users_roles.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    organization_invitations: organization_invitations.JSONSelectable;
    organization_memberships: organization_memberships.JSONSelectable;
    organizations: organizations.JSONSelectable;
    user_authentications: user_authentications.JSONSelectable;
    user_emails: user_emails.JSONSelectable;
    user_roles: user_roles.JSONSelectable;
    users: users.JSONSelectable;
    users_roles: users_roles.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    organization_invitations: organization_invitations.Whereable;
    organization_memberships: organization_memberships.Whereable;
    organizations: organizations.Whereable;
    user_authentications: user_authentications.Whereable;
    user_emails: user_emails.Whereable;
    user_roles: user_roles.Whereable;
    users: users.Whereable;
    users_roles: users_roles.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    organization_invitations: organization_invitations.Insertable;
    organization_memberships: organization_memberships.Insertable;
    organizations: organizations.Insertable;
    user_authentications: user_authentications.Insertable;
    user_emails: user_emails.Insertable;
    user_roles: user_roles.Insertable;
    users: users.Insertable;
    users_roles: users_roles.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    organization_invitations: organization_invitations.Updatable;
    organization_memberships: organization_memberships.Updatable;
    organizations: organizations.Updatable;
    user_authentications: user_authentications.Updatable;
    user_emails: user_emails.Updatable;
    user_roles: user_roles.Updatable;
    users: users.Updatable;
    users_roles: users_roles.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    organization_invitations: organization_invitations.UniqueIndex;
    organization_memberships: organization_memberships.UniqueIndex;
    organizations: organizations.UniqueIndex;
    user_authentications: user_authentications.UniqueIndex;
    user_emails: user_emails.UniqueIndex;
    user_roles: user_roles.UniqueIndex;
    users: users.UniqueIndex;
    users_roles: users_roles.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    organization_invitations: organization_invitations.Column;
    organization_memberships: organization_memberships.Column;
    organizations: organizations.Column;
    user_authentications: user_authentications.Column;
    user_emails: user_emails.Column;
    user_roles: user_roles.Column;
    users: users.Column;
    users_roles: users_roles.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    organization_invitations: organization_invitations.SQL;
    organization_memberships: organization_memberships.SQL;
    organizations: organizations.SQL;
    user_authentications: user_authentications.SQL;
    user_emails: user_emails.SQL;
    user_roles: user_roles.SQL;
    users: users.SQL;
    users_roles: users_roles.SQL;
  }[T];

}
