/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type TransferOrganizationOwnershipMutationVariables = Types.Exact<{
  organizationId: Types.Scalars['UUID'];
  userId: Types.Scalars['UUID'];
}>;


export type TransferOrganizationOwnershipMutation = (
  { __typename?: 'Mutation' }
  & { transferOrganizationOwnership: Types.Maybe<(
    { __typename?: 'TransferOrganizationOwnershipPayload' }
    & { organization: Types.Maybe<(
      { __typename?: 'Organization' }
      & Pick<Types.Organization, 'id' | 'currentUserIsOwner'>
    )> }
  )> }
);


export const TransferOrganizationOwnershipDocument = gql`
    mutation TransferOrganizationOwnership($organizationId: UUID!, $userId: UUID!) {
  transferOrganizationOwnership(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    organization {
      id
      currentUserIsOwner
    }
  }
}
    `;
export type TransferOrganizationOwnershipMutationFn = Apollo.MutationFunction<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>;

/**
 * __useTransferOrganizationOwnershipMutation__
 *
 * To run a mutation, you first call `useTransferOrganizationOwnershipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTransferOrganizationOwnershipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [transferOrganizationOwnershipMutation, { data, loading, error }] = useTransferOrganizationOwnershipMutation({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useTransferOrganizationOwnershipMutation(baseOptions?: Apollo.MutationHookOptions<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>(TransferOrganizationOwnershipDocument, options);
      }
export type TransferOrganizationOwnershipMutationHookResult = ReturnType<typeof useTransferOrganizationOwnershipMutation>;
export type TransferOrganizationOwnershipMutationResult = Apollo.MutationResult<TransferOrganizationOwnershipMutation>;
export type TransferOrganizationOwnershipMutationOptions = Apollo.BaseMutationOptions<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>;