/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type InviteToOrganizationMutationVariables = Types.Exact<{
  organizationId: Types.Scalars['UUID'];
  email?: Types.Maybe<Types.Scalars['String']>;
  username?: Types.Maybe<Types.Scalars['String']>;
}>;


export type InviteToOrganizationMutation = { __typename?: 'Mutation', inviteToOrganization: Types.Maybe<{ __typename?: 'InviteToOrganizationPayload', clientMutationId: Types.Maybe<string> }> };


export const InviteToOrganizationDocument = gql`
    mutation InviteToOrganization($organizationId: UUID!, $email: String, $username: String) {
  inviteToOrganization(
    input: {organizationId: $organizationId, email: $email, username: $username}
  ) {
    clientMutationId
  }
}
    `;
export type InviteToOrganizationMutationFn = Apollo.MutationFunction<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>;

/**
 * __useInviteToOrganizationMutation__
 *
 * To run a mutation, you first call `useInviteToOrganizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInviteToOrganizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [inviteToOrganizationMutation, { data, loading, error }] = useInviteToOrganizationMutation({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *      email: // value for 'email'
 *      username: // value for 'username'
 *   },
 * });
 */
export function useInviteToOrganizationMutation(baseOptions?: Apollo.MutationHookOptions<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>(InviteToOrganizationDocument, options);
      }
export type InviteToOrganizationMutationHookResult = ReturnType<typeof useInviteToOrganizationMutation>;
export type InviteToOrganizationMutationResult = Apollo.MutationResult<InviteToOrganizationMutation>;
export type InviteToOrganizationMutationOptions = Apollo.BaseMutationOptions<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>;