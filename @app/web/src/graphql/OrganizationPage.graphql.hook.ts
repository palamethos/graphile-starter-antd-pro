/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { OrganizationPage_QueryFragment } from './OrganizationPage_Query.graphql.hook';
import { gql } from '@apollo/client';
import { OrganizationPage_QueryFragmentDoc } from './OrganizationPage_Query.graphql.hook';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type OrganizationPageQueryVariables = Types.Exact<{
  slug: Types.Scalars['String'];
}>;


export type OrganizationPageQuery = (
  { __typename?: 'Query' }
  & OrganizationPage_QueryFragment
);


export const OrganizationPageDocument = gql`
    query OrganizationPage($slug: String!) {
  ...OrganizationPage_Query
}
    ${OrganizationPage_QueryFragmentDoc}`;

/**
 * __useOrganizationPageQuery__
 *
 * To run a query within a React component, call `useOrganizationPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrganizationPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrganizationPageQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useOrganizationPageQuery(baseOptions: Apollo.QueryHookOptions<OrganizationPageQuery, OrganizationPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OrganizationPageQuery, OrganizationPageQueryVariables>(OrganizationPageDocument, options);
      }
export function useOrganizationPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrganizationPageQuery, OrganizationPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OrganizationPageQuery, OrganizationPageQueryVariables>(OrganizationPageDocument, options);
        }
export type OrganizationPageQueryHookResult = ReturnType<typeof useOrganizationPageQuery>;
export type OrganizationPageLazyQueryHookResult = ReturnType<typeof useOrganizationPageLazyQuery>;
export type OrganizationPageQueryResult = Apollo.QueryResult<OrganizationPageQuery, OrganizationPageQueryVariables>;