/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type UnlinkUserAuthenticationMutationVariables = Types.Exact<{
  id: Types.Scalars['UUID'];
}>;


export type UnlinkUserAuthenticationMutation = { __typename?: 'Mutation', deleteUserAuthentication: Types.Maybe<{ __typename?: 'DeleteUserAuthenticationPayload', user: Types.Maybe<{ __typename?: 'User', id: any, userAuthentications: Array<{ __typename?: 'UserAuthentication', id: any, identifier: string, service: string, createdAt: string }> }> }> };


export const UnlinkUserAuthenticationDocument = gql`
    mutation UnlinkUserAuthentication($id: UUID!) {
  deleteUserAuthentication(input: {id: $id}) {
    user {
      id
      userAuthentications(first: 50) {
        id
        identifier
        service
        createdAt
      }
    }
  }
}
    `;
export type UnlinkUserAuthenticationMutationFn = Apollo.MutationFunction<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>;

/**
 * __useUnlinkUserAuthenticationMutation__
 *
 * To run a mutation, you first call `useUnlinkUserAuthenticationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlinkUserAuthenticationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlinkUserAuthenticationMutation, { data, loading, error }] = useUnlinkUserAuthenticationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useUnlinkUserAuthenticationMutation(baseOptions?: Apollo.MutationHookOptions<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>(UnlinkUserAuthenticationDocument, options);
      }
export type UnlinkUserAuthenticationMutationHookResult = ReturnType<typeof useUnlinkUserAuthenticationMutation>;
export type UnlinkUserAuthenticationMutationResult = Apollo.MutationResult<UnlinkUserAuthenticationMutation>;
export type UnlinkUserAuthenticationMutationOptions = Apollo.BaseMutationOptions<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>;