/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { EmailsForm_UserFragment } from './EmailsForm_User.graphql';
import { gql } from '@apollo/client';
import { EmailsForm_UserFragmentDoc } from './EmailsForm_User.graphql';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type SettingsEmailsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type SettingsEmailsQuery = (
  { __typename?: 'Query' }
  & { currentUser: Types.Maybe<(
    { __typename?: 'User' }
    & Pick<Types.User, 'id' | 'isVerified'>
    & EmailsForm_UserFragment
  )> }
);


export const SettingsEmailsDocument = gql`
    query SettingsEmails {
  currentUser {
    id
    isVerified
    ...EmailsForm_User
  }
}
    ${EmailsForm_UserFragmentDoc}`;

/**
 * __useSettingsEmailsQuery__
 *
 * To run a query within a React component, call `useSettingsEmailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsEmailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsEmailsQuery({
 *   variables: {
 *   },
 * });
 */
export function useSettingsEmailsQuery(baseOptions?: Apollo.QueryHookOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SettingsEmailsQuery, SettingsEmailsQueryVariables>(SettingsEmailsDocument, options);
      }
export function useSettingsEmailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SettingsEmailsQuery, SettingsEmailsQueryVariables>(SettingsEmailsDocument, options);
        }
export type SettingsEmailsQueryHookResult = ReturnType<typeof useSettingsEmailsQuery>;
export type SettingsEmailsLazyQueryHookResult = ReturnType<typeof useSettingsEmailsLazyQuery>;
export type SettingsEmailsQueryResult = Apollo.QueryResult<SettingsEmailsQuery, SettingsEmailsQueryVariables>;