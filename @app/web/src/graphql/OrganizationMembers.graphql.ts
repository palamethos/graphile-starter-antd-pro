/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { OrganizationPage_OrganizationFragment, OrganizationPage_QueryFragment } from './OrganizationPage_Query.graphql';
import { gql } from '@apollo/client';
import { OrganizationPage_OrganizationFragmentDoc, OrganizationPage_QueryFragmentDoc } from './OrganizationPage_Query.graphql';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type OrganizationMembers_MembershipFragment = (
  { __typename?: 'OrganizationMembership' }
  & Pick<Types.OrganizationMembership, 'id' | 'createdAt' | 'isOwner' | 'isBillingContact'>
  & { user: Types.Maybe<(
    { __typename?: 'User' }
    & Pick<Types.User, 'id' | 'username' | 'name'>
  )> }
);

export type OrganizationMembers_OrganizationFragment = (
  { __typename?: 'Organization' }
  & Pick<Types.Organization, 'id' | 'name' | 'slug'>
  & { organizationMembershipsConnection: (
    { __typename?: 'OrganizationMembershipsConnection' }
    & Pick<Types.OrganizationMembershipsConnection, 'totalCount'>
    & { nodes: Array<(
      { __typename?: 'OrganizationMembership' }
      & Pick<Types.OrganizationMembership, 'id'>
      & OrganizationMembers_MembershipFragment
    )> }
  ) }
  & OrganizationPage_OrganizationFragment
);

export type OrganizationMembersQueryVariables = Types.Exact<{
  slug: Types.Scalars['String'];
  offset?: Types.Maybe<Types.Scalars['Int']>;
}>;


export type OrganizationMembersQuery = (
  { __typename?: 'Query' }
  & { organizationBySlug: Types.Maybe<(
    { __typename?: 'Organization' }
    & Pick<Types.Organization, 'id'>
    & OrganizationMembers_OrganizationFragment
  )> }
  & OrganizationPage_QueryFragment
);

export const OrganizationMembers_MembershipFragmentDoc = gql`
    fragment OrganizationMembers_Membership on OrganizationMembership {
  id
  createdAt
  isOwner
  isBillingContact
  user {
    id
    username
    name
  }
}
    `;
export const OrganizationMembers_OrganizationFragmentDoc = gql`
    fragment OrganizationMembers_Organization on Organization {
  id
  ...OrganizationPage_Organization
  name
  slug
  organizationMembershipsConnection(
    first: 10
    offset: $offset
    orderBy: [MEMBER_NAME_ASC]
  ) {
    nodes {
      id
      ...OrganizationMembers_Membership
    }
    totalCount
  }
}
    ${OrganizationPage_OrganizationFragmentDoc}
${OrganizationMembers_MembershipFragmentDoc}`;
export const OrganizationMembersDocument = gql`
    query OrganizationMembers($slug: String!, $offset: Int = 0) {
  ...OrganizationPage_Query
  organizationBySlug(slug: $slug) {
    id
    ...OrganizationMembers_Organization
  }
}
    ${OrganizationPage_QueryFragmentDoc}
${OrganizationMembers_OrganizationFragmentDoc}`;

/**
 * __useOrganizationMembersQuery__
 *
 * To run a query within a React component, call `useOrganizationMembersQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrganizationMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrganizationMembersQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useOrganizationMembersQuery(baseOptions: Apollo.QueryHookOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OrganizationMembersQuery, OrganizationMembersQueryVariables>(OrganizationMembersDocument, options);
      }
export function useOrganizationMembersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OrganizationMembersQuery, OrganizationMembersQueryVariables>(OrganizationMembersDocument, options);
        }
export type OrganizationMembersQueryHookResult = ReturnType<typeof useOrganizationMembersQuery>;
export type OrganizationMembersLazyQueryHookResult = ReturnType<typeof useOrganizationMembersLazyQuery>;
export type OrganizationMembersQueryResult = Apollo.QueryResult<OrganizationMembersQuery, OrganizationMembersQueryVariables>;