/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type AcceptOrganizationInviteMutationVariables = Types.Exact<{
  id: Types.Scalars['UUID'];
  code?: Types.Maybe<Types.Scalars['String']>;
}>;


export type AcceptOrganizationInviteMutation = { __typename?: 'Mutation', acceptInvitationToOrganization: Types.Maybe<{ __typename?: 'AcceptInvitationToOrganizationPayload', clientMutationId: Types.Maybe<string> }> };


export const AcceptOrganizationInviteDocument = gql`
    mutation AcceptOrganizationInvite($id: UUID!, $code: String) {
  acceptInvitationToOrganization(input: {invitationId: $id, code: $code}) {
    clientMutationId
  }
}
    `;
export type AcceptOrganizationInviteMutationFn = Apollo.MutationFunction<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>;

/**
 * __useAcceptOrganizationInviteMutation__
 *
 * To run a mutation, you first call `useAcceptOrganizationInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptOrganizationInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptOrganizationInviteMutation, { data, loading, error }] = useAcceptOrganizationInviteMutation({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *   },
 * });
 */
export function useAcceptOrganizationInviteMutation(baseOptions?: Apollo.MutationHookOptions<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>(AcceptOrganizationInviteDocument, options);
      }
export type AcceptOrganizationInviteMutationHookResult = ReturnType<typeof useAcceptOrganizationInviteMutation>;
export type AcceptOrganizationInviteMutationResult = Apollo.MutationResult<AcceptOrganizationInviteMutation>;
export type AcceptOrganizationInviteMutationOptions = Apollo.BaseMutationOptions<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>;