/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type TransferOrganizationBillingContactMutationVariables = Types.Exact<{
  organizationId: Types.Scalars['UUID'];
  userId: Types.Scalars['UUID'];
}>;


export type TransferOrganizationBillingContactMutation = { __typename?: 'Mutation', transferOrganizationBillingContact: Types.Maybe<{ __typename?: 'TransferOrganizationBillingContactPayload', organization: Types.Maybe<{ __typename?: 'Organization', id: any, currentUserIsBillingContact: Types.Maybe<boolean> }> }> };


export const TransferOrganizationBillingContactDocument = gql`
    mutation TransferOrganizationBillingContact($organizationId: UUID!, $userId: UUID!) {
  transferOrganizationBillingContact(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    organization {
      id
      currentUserIsBillingContact
    }
  }
}
    `;
export type TransferOrganizationBillingContactMutationFn = Apollo.MutationFunction<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>;

/**
 * __useTransferOrganizationBillingContactMutation__
 *
 * To run a mutation, you first call `useTransferOrganizationBillingContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTransferOrganizationBillingContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [transferOrganizationBillingContactMutation, { data, loading, error }] = useTransferOrganizationBillingContactMutation({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useTransferOrganizationBillingContactMutation(baseOptions?: Apollo.MutationHookOptions<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>(TransferOrganizationBillingContactDocument, options);
      }
export type TransferOrganizationBillingContactMutationHookResult = ReturnType<typeof useTransferOrganizationBillingContactMutation>;
export type TransferOrganizationBillingContactMutationResult = Apollo.MutationResult<TransferOrganizationBillingContactMutation>;
export type TransferOrganizationBillingContactMutationOptions = Apollo.BaseMutationOptions<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>;