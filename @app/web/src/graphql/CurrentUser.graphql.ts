/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type CurrentUserQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = (
  { __typename?: 'Query' }
  & { currentUser: Types.Maybe<(
    { __typename?: 'User' }
    & Pick<Types.User, 'id'>
    & Shared_UserFragment
  )> }
);

export type Shared_UserFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name' | 'surname' | 'username' | 'avatarUrl' | 'isAdmin' | 'isVerified'>
  & { usersRoles: Array<(
    { __typename?: 'UsersRole' }
    & Pick<Types.UsersRole, 'id' | 'role'>
  )>, userEmails: Array<(
    { __typename?: 'UserEmail' }
    & Pick<Types.UserEmail, 'email'>
  )>, organizationMembershipsConnection: (
    { __typename?: 'OrganizationMembershipsConnection' }
    & { nodes: Array<(
      { __typename?: 'OrganizationMembership' }
      & Pick<Types.OrganizationMembership, 'id' | 'isOwner' | 'isBillingContact'>
      & { organization: Types.Maybe<(
        { __typename?: 'Organization' }
        & Pick<Types.Organization, 'id' | 'name' | 'slug'>
      )> }
    )> }
  ) }
);

export const Shared_UserFragmentDoc = gql`
    fragment Shared_User on User {
  id
  name
  surname
  username
  avatarUrl
  isAdmin
  isVerified
  usersRoles {
    id
    role
  }
  userEmails {
    email
  }
  organizationMembershipsConnection(first: 20) {
    nodes {
      id
      isOwner
      isBillingContact
      organization {
        id
        name
        slug
      }
    }
  }
}
    `;
export const CurrentUserDocument = gql`
    query CurrentUser {
  currentUser {
    id
    ...Shared_User
  }
}
    ${Shared_UserFragmentDoc}`;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;