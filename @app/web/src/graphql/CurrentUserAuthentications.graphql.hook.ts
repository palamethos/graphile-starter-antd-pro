/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import * as Types from '../../../graphql/index';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type CurrentUserAuthenticationsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type CurrentUserAuthenticationsQuery = { __typename?: 'Query', currentUser: { __typename?: 'User', id: any, authentications: Array<{ __typename?: 'UserAuthentication', id: any, service: string, identifier: string, createdAt: string }> } | null };


export const CurrentUserAuthenticationsDocument = gql`
    query CurrentUserAuthentications {
  currentUser {
    id
    authentications: userAuthentications(first: 50) {
      id
      service
      identifier
      createdAt
    }
  }
}
    `;

/**
 * __useCurrentUserAuthenticationsQuery__
 *
 * To run a query within a React component, call `useCurrentUserAuthenticationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserAuthenticationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserAuthenticationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserAuthenticationsQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>(CurrentUserAuthenticationsDocument, options);
      }
export function useCurrentUserAuthenticationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>(CurrentUserAuthenticationsDocument, options);
        }
export type CurrentUserAuthenticationsQueryHookResult = ReturnType<typeof useCurrentUserAuthenticationsQuery>;
export type CurrentUserAuthenticationsLazyQueryHookResult = ReturnType<typeof useCurrentUserAuthenticationsLazyQuery>;
export type CurrentUserAuthenticationsQueryResult = Apollo.QueryResult<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>;